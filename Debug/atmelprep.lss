
atmelprep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c54  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000594  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000086d  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
   c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	cf 00       	.word	0x00cf	; ????
  5a:	e8 00       	.word	0x00e8	; ????
  5c:	00 01       	movw	r0, r0
  5e:	00 01       	movw	r0, r0
  60:	00 01       	movw	r0, r0
  62:	00 01       	movw	r0, r0
  64:	00 01       	movw	r0, r0
  66:	00 01       	movw	r0, r0
  68:	00 01       	movw	r0, r0
  6a:	00 01       	movw	r0, r0
  6c:	00 01       	movw	r0, r0
  6e:	00 01       	movw	r0, r0
  70:	00 01       	movw	r0, r0
  72:	00 01       	movw	r0, r0
  74:	00 01       	movw	r0, r0
  76:	00 01       	movw	r0, r0
  78:	00 01       	movw	r0, r0
  7a:	00 01       	movw	r0, r0
  7c:	00 01       	movw	r0, r0
  7e:	00 01       	movw	r0, r0
  80:	00 01       	movw	r0, r0
  82:	00 01       	movw	r0, r0
  84:	00 01       	movw	r0, r0
  86:	00 01       	movw	r0, r0
  88:	00 01       	movw	r0, r0
  8a:	00 01       	movw	r0, r0
  8c:	00 01       	movw	r0, r0
  8e:	00 01       	movw	r0, r0
  90:	00 01       	movw	r0, r0
  92:	00 01       	movw	r0, r0
  94:	9d 00       	.word	0x009d	; ????
  96:	b6 00       	.word	0x00b6	; ????
  98:	cf 00       	.word	0x00cf	; ????
  9a:	e8 00       	.word	0x00e8	; ????
  9c:	0d 01       	movw	r0, r26
  9e:	26 01       	movw	r4, r12
  a0:	3f 01       	movw	r6, r30
  a2:	58 01       	movw	r10, r16
  a4:	70 01       	movw	r14, r0
  a6:	70 01       	movw	r14, r0
  a8:	70 01       	movw	r14, r0
  aa:	70 01       	movw	r14, r0
  ac:	70 01       	movw	r14, r0
  ae:	70 01       	movw	r14, r0
  b0:	70 01       	movw	r14, r0
  b2:	70 01       	movw	r14, r0
  b4:	70 01       	movw	r14, r0
  b6:	70 01       	movw	r14, r0
  b8:	70 01       	movw	r14, r0
  ba:	70 01       	movw	r14, r0
  bc:	70 01       	movw	r14, r0
  be:	70 01       	movw	r14, r0
  c0:	70 01       	movw	r14, r0
  c2:	70 01       	movw	r14, r0
  c4:	70 01       	movw	r14, r0
  c6:	70 01       	movw	r14, r0
  c8:	70 01       	movw	r14, r0
  ca:	70 01       	movw	r14, r0
  cc:	70 01       	movw	r14, r0
  ce:	70 01       	movw	r14, r0
  d0:	70 01       	movw	r14, r0
  d2:	70 01       	movw	r14, r0
  d4:	70 01       	movw	r14, r0
  d6:	70 01       	movw	r14, r0
  d8:	70 01       	movw	r14, r0
  da:	70 01       	movw	r14, r0
  dc:	0d 01       	movw	r0, r26
  de:	26 01       	movw	r4, r12
  e0:	3f 01       	movw	r6, r30
  e2:	58 01       	movw	r10, r16

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e4 e1       	ldi	r30, 0x14	; 20
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a0 36       	cpi	r26, 0x60	; 96
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	a0 e6       	ldi	r26, 0x60	; 96
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
 10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
 110:	a0 36       	cpi	r26, 0x60	; 96
 112:	b2 07       	cpc	r27, r18
 114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
 116:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
 11a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000011e <__bad_interrupt>:
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <GPIO_vSETPIN_DDR>:
			XDDRC = dir;
		break;
		
		case 'D' :
		case 'd' :
			XDDRD = dir;
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	e1 54       	subi	r30, 0x41	; 65
 128:	f1 09       	sbc	r31, r1
 12a:	e4 32       	cpi	r30, 0x24	; 36
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <GPIO_vSETPIN_DDR+0x10>
 130:	67 c0       	rjmp	.+206    	; 0x200 <GPIO_vSETPIN_DDR+0xde>
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 82 01 	jmp	0x304	; 0x304 <__tablejump2__>
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <GPIO_vSETPIN_DDR+0x32>
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <GPIO_vSETPIN_DDR+0x28>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <GPIO_vSETPIN_DDR+0x24>
 14e:	82 2b       	or	r24, r18
 150:	8a bb       	out	0x1a, r24	; 26
 152:	08 95       	ret
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <GPIO_vSETPIN_DDR+0x3e>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <GPIO_vSETPIN_DDR+0x3a>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f4       	brne	.+22     	; 0x186 <GPIO_vSETPIN_DDR+0x64>
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <GPIO_vSETPIN_DDR+0x5a>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <GPIO_vSETPIN_DDR+0x56>
 180:	82 2b       	or	r24, r18
 182:	87 bb       	out	0x17, r24	; 23
 184:	08 95       	ret
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <GPIO_vSETPIN_DDR+0x70>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <GPIO_vSETPIN_DDR+0x6c>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <GPIO_vSETPIN_DDR+0x96>
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_vSETPIN_DDR+0x8c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_vSETPIN_DDR+0x88>
 1b2:	82 2b       	or	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
 1b6:	08 95       	ret
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <GPIO_vSETPIN_DDR+0xa2>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <GPIO_vSETPIN_DDR+0x9e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	59 f4       	brne	.+22     	; 0x1ea <GPIO_vSETPIN_DDR+0xc8>
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_vSETPIN_DDR+0xbe>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_vSETPIN_DDR+0xba>
 1e4:	82 2b       	or	r24, r18
 1e6:	81 bb       	out	0x11, r24	; 17
 1e8:	08 95       	ret
 1ea:	21 b3       	in	r18, 0x11	; 17
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <GPIO_vSETPIN_DDR+0xd4>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <GPIO_vSETPIN_DDR+0xd0>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	08 95       	ret

00000202 <GPIO_vWRITEPIN>:
		break;
	}
}

void GPIO_vWRITEPIN(u_int8 portnum, u_int8 pinnum, u_int8 val){
	switch (portnum){
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	e1 54       	subi	r30, 0x41	; 65
 208:	f1 09       	sbc	r31, r1
 20a:	e4 32       	cpi	r30, 0x24	; 36
 20c:	f1 05       	cpc	r31, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <GPIO_vWRITEPIN+0x10>
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <GPIO_vWRITEPIN+0xde>
 212:	e2 5b       	subi	r30, 0xB2	; 178
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	0c 94 82 01 	jmp	0x304	; 0x304 <__tablejump2__>
		case 'A' :
		case 'a' :
			if(val == HIGH){
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	59 f4       	brne	.+22     	; 0x234 <GPIO_vWRITEPIN+0x32>
				SET_BIT(XPORTA,pinnum);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <GPIO_vWRITEPIN+0x28>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <GPIO_vWRITEPIN+0x24>
 22e:	82 2b       	or	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	08 95       	ret
			}
			else{
				CLR_BIT(XPORTA,pinnum);
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <GPIO_vWRITEPIN+0x3e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <GPIO_vWRITEPIN+0x3a>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
			}
	    break;
		case 'B' :
		case 'b' :
			if(val == HIGH){
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f4       	brne	.+22     	; 0x266 <GPIO_vWRITEPIN+0x64>
				SET_BIT(XPORTB,pinnum);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <GPIO_vWRITEPIN+0x5a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <GPIO_vWRITEPIN+0x56>
 260:	82 2b       	or	r24, r18
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
			}
			else{
				CLR_BIT(XPORTB,pinnum);
 266:	28 b3       	in	r18, 0x18	; 24
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_vWRITEPIN+0x70>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_vWRITEPIN+0x6c>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
			}
		break;
		case 'C' :
		case 'c' :
			if(val == HIGH){
 27e:	41 30       	cpi	r20, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <GPIO_vWRITEPIN+0x96>
				SET_BIT(XPORTC,pinnum);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <GPIO_vWRITEPIN+0x8c>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <GPIO_vWRITEPIN+0x88>
 292:	82 2b       	or	r24, r18
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
			}
			else{
				CLR_BIT(XPORTC,pinnum);
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <GPIO_vWRITEPIN+0xa2>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <GPIO_vWRITEPIN+0x9e>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	08 95       	ret
			}
		break;
		case 'D' :
		case 'd' :
			if(val == HIGH){
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <GPIO_vWRITEPIN+0xc8>
				SET_BIT(XPORTD,pinnum);
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <GPIO_vWRITEPIN+0xbe>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <GPIO_vWRITEPIN+0xba>
 2c4:	82 2b       	or	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	08 95       	ret
			}
			else{
				CLR_BIT(XPORTD,pinnum);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <GPIO_vWRITEPIN+0xd4>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <GPIO_vWRITEPIN+0xd0>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	08 95       	ret

000002e2 <LED_vInit>:

#include "LED_ECU_driver.h"
#define High 1

void LED_vInit(u_int8 portnum, u_int8 pinnum){
	GPIO_vSETPIN_DDR(portnum,pinnum,1);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	0e 94 91 00 	call	0x122	; 0x122 <GPIO_vSETPIN_DDR>
 2e8:	08 95       	ret

000002ea <LED_vOn>:
}

void LED_vOn(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,1);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	0e 94 01 01 	call	0x202	; 0x202 <GPIO_vWRITEPIN>
 2f0:	08 95       	ret

000002f2 <main>:
#define F_CPU 8000000UL

int main(void)
{
    /* Replace with your application code */
	LED_vInit('A',6);
 2f2:	66 e0       	ldi	r22, 0x06	; 6
 2f4:	81 e4       	ldi	r24, 0x41	; 65
 2f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LED_vInit>
	//Switch_vInit('D',1);
    while (1) {
		//if(1 == Switch_u8Read('D',1)){
			LED_vOn('A',6);
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_vOn>
 302:	fb cf       	rjmp	.-10     	; 0x2fa <main+0x8>

00000304 <__tablejump2__>:
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	05 90       	lpm	r0, Z+
 30a:	f4 91       	lpm	r31, Z
 30c:	e0 2d       	mov	r30, r0
 30e:	09 94       	ijmp

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
