
atmelprep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000bd0  00000c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000c74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d38  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f3  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  00003533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00004168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000636  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001505  00000000  00000000  00004a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	51 01       	movw	r10, r2
  56:	6a 01       	movw	r12, r20
  58:	83 01       	movw	r16, r6
  5a:	9c 01       	movw	r18, r24
  5c:	b4 01       	movw	r22, r8
  5e:	b4 01       	movw	r22, r8
  60:	b4 01       	movw	r22, r8
  62:	b4 01       	movw	r22, r8
  64:	b4 01       	movw	r22, r8
  66:	b4 01       	movw	r22, r8
  68:	b4 01       	movw	r22, r8
  6a:	b4 01       	movw	r22, r8
  6c:	b4 01       	movw	r22, r8
  6e:	b4 01       	movw	r22, r8
  70:	b4 01       	movw	r22, r8
  72:	b4 01       	movw	r22, r8
  74:	b4 01       	movw	r22, r8
  76:	b4 01       	movw	r22, r8
  78:	b4 01       	movw	r22, r8
  7a:	b4 01       	movw	r22, r8
  7c:	b4 01       	movw	r22, r8
  7e:	b4 01       	movw	r22, r8
  80:	b4 01       	movw	r22, r8
  82:	b4 01       	movw	r22, r8
  84:	b4 01       	movw	r22, r8
  86:	b4 01       	movw	r22, r8
  88:	b4 01       	movw	r22, r8
  8a:	b4 01       	movw	r22, r8
  8c:	b4 01       	movw	r22, r8
  8e:	b4 01       	movw	r22, r8
  90:	b4 01       	movw	r22, r8
  92:	b4 01       	movw	r22, r8
  94:	51 01       	movw	r10, r2
  96:	6a 01       	movw	r12, r20
  98:	83 01       	movw	r16, r6
  9a:	9c 01       	movw	r18, r24
  9c:	c0 01       	movw	r24, r0
  9e:	c2 01       	movw	r24, r4
  a0:	c4 01       	movw	r24, r8
  a2:	c6 01       	movw	r24, r12
  a4:	c7 01       	movw	r24, r14
  a6:	c7 01       	movw	r24, r14
  a8:	c7 01       	movw	r24, r14
  aa:	c7 01       	movw	r24, r14
  ac:	c7 01       	movw	r24, r14
  ae:	c7 01       	movw	r24, r14
  b0:	c7 01       	movw	r24, r14
  b2:	c7 01       	movw	r24, r14
  b4:	c7 01       	movw	r24, r14
  b6:	c7 01       	movw	r24, r14
  b8:	c7 01       	movw	r24, r14
  ba:	c7 01       	movw	r24, r14
  bc:	c7 01       	movw	r24, r14
  be:	c7 01       	movw	r24, r14
  c0:	c7 01       	movw	r24, r14
  c2:	c7 01       	movw	r24, r14
  c4:	c7 01       	movw	r24, r14
  c6:	c7 01       	movw	r24, r14
  c8:	c7 01       	movw	r24, r14
  ca:	c7 01       	movw	r24, r14
  cc:	c7 01       	movw	r24, r14
  ce:	c7 01       	movw	r24, r14
  d0:	c7 01       	movw	r24, r14
  d2:	c7 01       	movw	r24, r14
  d4:	c7 01       	movw	r24, r14
  d6:	c7 01       	movw	r24, r14
  d8:	c7 01       	movw	r24, r14
  da:	c7 01       	movw	r24, r14
  dc:	c0 01       	movw	r24, r0
  de:	c2 01       	movw	r24, r4
  e0:	c4 01       	movw	r24, r8
  e2:	c6 01       	movw	r24, r12
  e4:	d4 01       	movw	r26, r8
  e6:	ed 01       	movw	r28, r26
  e8:	06 02       	muls	r16, r22
  ea:	1f 02       	muls	r17, r31
  ec:	37 02       	muls	r19, r23
  ee:	37 02       	muls	r19, r23
  f0:	37 02       	muls	r19, r23
  f2:	37 02       	muls	r19, r23
  f4:	37 02       	muls	r19, r23
  f6:	37 02       	muls	r19, r23
  f8:	37 02       	muls	r19, r23
  fa:	37 02       	muls	r19, r23
  fc:	37 02       	muls	r19, r23
  fe:	37 02       	muls	r19, r23
 100:	37 02       	muls	r19, r23
 102:	37 02       	muls	r19, r23
 104:	37 02       	muls	r19, r23
 106:	37 02       	muls	r19, r23
 108:	37 02       	muls	r19, r23
 10a:	37 02       	muls	r19, r23
 10c:	37 02       	muls	r19, r23
 10e:	37 02       	muls	r19, r23
 110:	37 02       	muls	r19, r23
 112:	37 02       	muls	r19, r23
 114:	37 02       	muls	r19, r23
 116:	37 02       	muls	r19, r23
 118:	37 02       	muls	r19, r23
 11a:	37 02       	muls	r19, r23
 11c:	37 02       	muls	r19, r23
 11e:	37 02       	muls	r19, r23
 120:	37 02       	muls	r19, r23
 122:	37 02       	muls	r19, r23
 124:	d4 01       	movw	r26, r8
 126:	ed 01       	movw	r28, r26
 128:	06 02       	muls	r16, r22
 12a:	1f 02       	muls	r17, r31
 12c:	43 02       	muls	r20, r19
 12e:	45 02       	muls	r20, r21
 130:	47 02       	muls	r20, r23
 132:	49 02       	muls	r20, r25
 134:	4a 02       	muls	r20, r26
 136:	4a 02       	muls	r20, r26
 138:	4a 02       	muls	r20, r26
 13a:	4a 02       	muls	r20, r26
 13c:	4a 02       	muls	r20, r26
 13e:	4a 02       	muls	r20, r26
 140:	4a 02       	muls	r20, r26
 142:	4a 02       	muls	r20, r26
 144:	4a 02       	muls	r20, r26
 146:	4a 02       	muls	r20, r26
 148:	4a 02       	muls	r20, r26
 14a:	4a 02       	muls	r20, r26
 14c:	4a 02       	muls	r20, r26
 14e:	4a 02       	muls	r20, r26
 150:	4a 02       	muls	r20, r26
 152:	4a 02       	muls	r20, r26
 154:	4a 02       	muls	r20, r26
 156:	4a 02       	muls	r20, r26
 158:	4a 02       	muls	r20, r26
 15a:	4a 02       	muls	r20, r26
 15c:	4a 02       	muls	r20, r26
 15e:	4a 02       	muls	r20, r26
 160:	4a 02       	muls	r20, r26
 162:	4a 02       	muls	r20, r26
 164:	4a 02       	muls	r20, r26
 166:	4a 02       	muls	r20, r26
 168:	4a 02       	muls	r20, r26
 16a:	4a 02       	muls	r20, r26
 16c:	43 02       	muls	r20, r19
 16e:	45 02       	muls	r20, r21
 170:	47 02       	muls	r20, r23
 172:	49 02       	muls	r20, r25
 174:	57 02       	muls	r21, r23
 176:	69 02       	muls	r22, r25
 178:	7b 02       	muls	r23, r27
 17a:	8d 02       	muls	r24, r29
 17c:	9f 02       	muls	r25, r31
 17e:	9f 02       	muls	r25, r31
 180:	9f 02       	muls	r25, r31
 182:	9f 02       	muls	r25, r31
 184:	9f 02       	muls	r25, r31
 186:	9f 02       	muls	r25, r31
 188:	9f 02       	muls	r25, r31
 18a:	9f 02       	muls	r25, r31
 18c:	9f 02       	muls	r25, r31
 18e:	9f 02       	muls	r25, r31
 190:	9f 02       	muls	r25, r31
 192:	9f 02       	muls	r25, r31
 194:	9f 02       	muls	r25, r31
 196:	9f 02       	muls	r25, r31
 198:	9f 02       	muls	r25, r31
 19a:	9f 02       	muls	r25, r31
 19c:	9f 02       	muls	r25, r31
 19e:	9f 02       	muls	r25, r31
 1a0:	9f 02       	muls	r25, r31
 1a2:	9f 02       	muls	r25, r31
 1a4:	9f 02       	muls	r25, r31
 1a6:	9f 02       	muls	r25, r31
 1a8:	9f 02       	muls	r25, r31
 1aa:	9f 02       	muls	r25, r31
 1ac:	9f 02       	muls	r25, r31
 1ae:	9f 02       	muls	r25, r31
 1b0:	9f 02       	muls	r25, r31
 1b2:	9f 02       	muls	r25, r31
 1b4:	57 02       	muls	r21, r23
 1b6:	69 02       	muls	r22, r25
 1b8:	7b 02       	muls	r23, r27
 1ba:	8d 02       	muls	r24, r29
 1bc:	cb 02       	muls	r28, r27
 1be:	d2 02       	muls	r29, r18
 1c0:	d9 02       	muls	r29, r25
 1c2:	e0 02       	muls	r30, r16
 1c4:	e6 02       	muls	r30, r22
 1c6:	e6 02       	muls	r30, r22
 1c8:	e6 02       	muls	r30, r22
 1ca:	e6 02       	muls	r30, r22
 1cc:	e6 02       	muls	r30, r22
 1ce:	e6 02       	muls	r30, r22
 1d0:	e6 02       	muls	r30, r22
 1d2:	e6 02       	muls	r30, r22
 1d4:	e6 02       	muls	r30, r22
 1d6:	e6 02       	muls	r30, r22
 1d8:	e6 02       	muls	r30, r22
 1da:	e6 02       	muls	r30, r22
 1dc:	e6 02       	muls	r30, r22
 1de:	e6 02       	muls	r30, r22
 1e0:	e6 02       	muls	r30, r22
 1e2:	e6 02       	muls	r30, r22
 1e4:	e6 02       	muls	r30, r22
 1e6:	e6 02       	muls	r30, r22
 1e8:	e6 02       	muls	r30, r22
 1ea:	e6 02       	muls	r30, r22
 1ec:	e6 02       	muls	r30, r22
 1ee:	e6 02       	muls	r30, r22
 1f0:	e6 02       	muls	r30, r22
 1f2:	e6 02       	muls	r30, r22
 1f4:	e6 02       	muls	r30, r22
 1f6:	e6 02       	muls	r30, r22
 1f8:	e6 02       	muls	r30, r22
 1fa:	e6 02       	muls	r30, r22
 1fc:	cb 02       	muls	r28, r27
 1fe:	d2 02       	muls	r29, r18
 200:	d9 02       	muls	r29, r25
 202:	e0 02       	muls	r30, r16
 204:	0d 03       	fmul	r16, r21
 206:	14 03       	mulsu	r17, r20
 208:	1b 03       	fmul	r17, r19
 20a:	22 03       	mulsu	r18, r18
 20c:	28 03       	fmul	r18, r16
 20e:	28 03       	fmul	r18, r16
 210:	28 03       	fmul	r18, r16
 212:	28 03       	fmul	r18, r16
 214:	28 03       	fmul	r18, r16
 216:	28 03       	fmul	r18, r16
 218:	28 03       	fmul	r18, r16
 21a:	28 03       	fmul	r18, r16
 21c:	28 03       	fmul	r18, r16
 21e:	28 03       	fmul	r18, r16
 220:	28 03       	fmul	r18, r16
 222:	28 03       	fmul	r18, r16
 224:	28 03       	fmul	r18, r16
 226:	28 03       	fmul	r18, r16
 228:	28 03       	fmul	r18, r16
 22a:	28 03       	fmul	r18, r16
 22c:	28 03       	fmul	r18, r16
 22e:	28 03       	fmul	r18, r16
 230:	28 03       	fmul	r18, r16
 232:	28 03       	fmul	r18, r16
 234:	28 03       	fmul	r18, r16
 236:	28 03       	fmul	r18, r16
 238:	28 03       	fmul	r18, r16
 23a:	28 03       	fmul	r18, r16
 23c:	28 03       	fmul	r18, r16
 23e:	28 03       	fmul	r18, r16
 240:	28 03       	fmul	r18, r16
 242:	28 03       	fmul	r18, r16
 244:	0d 03       	fmul	r16, r21
 246:	14 03       	mulsu	r17, r20
 248:	1b 03       	fmul	r17, r19
 24a:	22 03       	mulsu	r18, r18

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf e5       	ldi	r28, 0x5F	; 95
 252:	d8 e0       	ldi	r29, 0x08	; 8
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	a0 e6       	ldi	r26, 0x60	; 96
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	e0 ed       	ldi	r30, 0xD0	; 208
 260:	fb e0       	ldi	r31, 0x0B	; 11
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a0 37       	cpi	r26, 0x70	; 112
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	a0 e7       	ldi	r26, 0x70	; 112
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	a2 37       	cpi	r26, 0x72	; 114
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 a1 05 	call	0xb42	; 0xb42 <main>
 282:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <GPIO_vSETPIN_DDR>:
void GPIO_vInternal_pullupON(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,1);
}

void GPIO_vInternal_pullupOFF(u_int8 portnum, u_int8 pinnum){
	GPIO_vWRITEPIN(portnum,pinnum,0);
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	e1 54       	subi	r30, 0x41	; 65
 290:	f1 09       	sbc	r31, r1
 292:	e4 32       	cpi	r30, 0x24	; 36
 294:	f1 05       	cpc	r31, r1
 296:	08 f0       	brcs	.+2      	; 0x29a <GPIO_vSETPIN_DDR+0x10>
 298:	67 c0       	rjmp	.+206    	; 0x368 <GPIO_vSETPIN_DDR+0xde>
 29a:	e6 5d       	subi	r30, 0xD6	; 214
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	59 f4       	brne	.+22     	; 0x2bc <GPIO_vSETPIN_DDR+0x32>
 2a6:	2a b3       	in	r18, 0x1a	; 26
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_vSETPIN_DDR+0x28>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_vSETPIN_DDR+0x24>
 2b6:	82 2b       	or	r24, r18
 2b8:	8a bb       	out	0x1a, r24	; 26
 2ba:	08 95       	ret
 2bc:	2a b3       	in	r18, 0x1a	; 26
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_vSETPIN_DDR+0x3e>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_vSETPIN_DDR+0x3a>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	8a bb       	out	0x1a, r24	; 26
 2d2:	08 95       	ret
 2d4:	41 30       	cpi	r20, 0x01	; 1
 2d6:	59 f4       	brne	.+22     	; 0x2ee <GPIO_vSETPIN_DDR+0x64>
 2d8:	27 b3       	in	r18, 0x17	; 23
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <GPIO_vSETPIN_DDR+0x5a>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <GPIO_vSETPIN_DDR+0x56>
 2e8:	82 2b       	or	r24, r18
 2ea:	87 bb       	out	0x17, r24	; 23
 2ec:	08 95       	ret
 2ee:	27 b3       	in	r18, 0x17	; 23
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <GPIO_vSETPIN_DDR+0x70>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <GPIO_vSETPIN_DDR+0x6c>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	87 bb       	out	0x17, r24	; 23
 304:	08 95       	ret
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	59 f4       	brne	.+22     	; 0x320 <GPIO_vSETPIN_DDR+0x96>
 30a:	24 b3       	in	r18, 0x14	; 20
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <GPIO_vSETPIN_DDR+0x8c>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <GPIO_vSETPIN_DDR+0x88>
 31a:	82 2b       	or	r24, r18
 31c:	84 bb       	out	0x14, r24	; 20
 31e:	08 95       	ret
 320:	24 b3       	in	r18, 0x14	; 20
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <GPIO_vSETPIN_DDR+0xa2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <GPIO_vSETPIN_DDR+0x9e>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	84 bb       	out	0x14, r24	; 20
 336:	08 95       	ret
 338:	41 30       	cpi	r20, 0x01	; 1
 33a:	59 f4       	brne	.+22     	; 0x352 <GPIO_vSETPIN_DDR+0xc8>
 33c:	21 b3       	in	r18, 0x11	; 17
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <GPIO_vSETPIN_DDR+0xbe>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <GPIO_vSETPIN_DDR+0xba>
 34c:	82 2b       	or	r24, r18
 34e:	81 bb       	out	0x11, r24	; 17
 350:	08 95       	ret
 352:	21 b3       	in	r18, 0x11	; 17
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <GPIO_vSETPIN_DDR+0xd4>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <GPIO_vSETPIN_DDR+0xd0>
 362:	80 95       	com	r24
 364:	82 23       	and	r24, r18
 366:	81 bb       	out	0x11, r24	; 17
 368:	08 95       	ret

0000036a <GPIO_vSETPORT_DDR>:
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	e1 54       	subi	r30, 0x41	; 65
 370:	f1 09       	sbc	r31, r1
 372:	e4 32       	cpi	r30, 0x24	; 36
 374:	f1 05       	cpc	r31, r1
 376:	58 f4       	brcc	.+22     	; 0x38e <GPIO_vSETPORT_DDR+0x24>
 378:	e2 5b       	subi	r30, 0xB2	; 178
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
 380:	6a bb       	out	0x1a, r22	; 26
 382:	08 95       	ret
 384:	67 bb       	out	0x17, r22	; 23
 386:	08 95       	ret
 388:	64 bb       	out	0x14, r22	; 20
 38a:	08 95       	ret
 38c:	61 bb       	out	0x11, r22	; 17
 38e:	08 95       	ret

00000390 <GPIO_vWRITEPIN>:
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	e1 54       	subi	r30, 0x41	; 65
 396:	f1 09       	sbc	r31, r1
 398:	e4 32       	cpi	r30, 0x24	; 36
 39a:	f1 05       	cpc	r31, r1
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <GPIO_vWRITEPIN+0x10>
 39e:	67 c0       	rjmp	.+206    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3a0:	ee 58       	subi	r30, 0x8E	; 142
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
 3a8:	41 30       	cpi	r20, 0x01	; 1
 3aa:	59 f4       	brne	.+22     	; 0x3c2 <GPIO_vWRITEPIN+0x32>
 3ac:	2b b3       	in	r18, 0x1b	; 27
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <GPIO_vWRITEPIN+0x28>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <GPIO_vWRITEPIN+0x24>
 3bc:	82 2b       	or	r24, r18
 3be:	8b bb       	out	0x1b, r24	; 27
 3c0:	08 95       	ret
 3c2:	2b b3       	in	r18, 0x1b	; 27
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_vWRITEPIN+0x3e>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <GPIO_vWRITEPIN+0x3a>
 3d2:	80 95       	com	r24
 3d4:	82 23       	and	r24, r18
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	08 95       	ret
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	59 f4       	brne	.+22     	; 0x3f4 <GPIO_vWRITEPIN+0x64>
 3de:	28 b3       	in	r18, 0x18	; 24
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GPIO_vWRITEPIN+0x5a>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <GPIO_vWRITEPIN+0x56>
 3ee:	82 2b       	or	r24, r18
 3f0:	88 bb       	out	0x18, r24	; 24
 3f2:	08 95       	ret
 3f4:	28 b3       	in	r18, 0x18	; 24
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_vWRITEPIN+0x6c>
 404:	80 95       	com	r24
 406:	82 23       	and	r24, r18
 408:	88 bb       	out	0x18, r24	; 24
 40a:	08 95       	ret
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	59 f4       	brne	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 410:	25 b3       	in	r18, 0x15	; 21
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	85 bb       	out	0x15, r24	; 21
 424:	08 95       	ret
 426:	25 b3       	in	r18, 0x15	; 21
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	08 95       	ret
 43e:	41 30       	cpi	r20, 0x01	; 1
 440:	59 f4       	brne	.+22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 442:	22 b3       	in	r18, 0x12	; 18
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	82 2b       	or	r24, r18
 454:	82 bb       	out	0x12, r24	; 18
 456:	08 95       	ret
 458:	22 b3       	in	r18, 0x12	; 18
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret

00000470 <GPIO_vWRITEPORT>:
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	e1 54       	subi	r30, 0x41	; 65
 476:	f1 09       	sbc	r31, r1
 478:	e4 32       	cpi	r30, 0x24	; 36
 47a:	f1 05       	cpc	r31, r1
 47c:	58 f4       	brcc	.+22     	; 0x494 <GPIO_vWRITEPORT+0x24>
 47e:	ea 56       	subi	r30, 0x6A	; 106
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
 486:	6b bb       	out	0x1b, r22	; 27
 488:	08 95       	ret
 48a:	68 bb       	out	0x18, r22	; 24
 48c:	08 95       	ret
 48e:	65 bb       	out	0x15, r22	; 21
 490:	08 95       	ret
 492:	62 bb       	out	0x12, r22	; 18
 494:	08 95       	ret

00000496 <GPIO_u8READPIN>:
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fc 01       	movw	r30, r24
 49a:	e1 54       	subi	r30, 0x41	; 65
 49c:	f1 09       	sbc	r31, r1
 49e:	e4 32       	cpi	r30, 0x24	; 36
 4a0:	f1 05       	cpc	r31, r1
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <GPIO_u8READPIN+0x10>
 4a4:	4c c0       	rjmp	.+152    	; 0x53e <GPIO_u8READPIN+0xa8>
 4a6:	e6 54       	subi	r30, 0x46	; 70
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
 4ae:	29 b3       	in	r18, 0x19	; 25
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	06 2e       	mov	r0, r22
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <GPIO_u8READPIN+0x26>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <GPIO_u8READPIN+0x22>
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	82 23       	and	r24, r18
 4c4:	93 23       	and	r25, r19
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <GPIO_u8READPIN+0x36>
 4c8:	95 95       	asr	r25
 4ca:	87 95       	ror	r24
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <GPIO_u8READPIN+0x32>
 4d0:	08 95       	ret
 4d2:	26 b3       	in	r18, 0x16	; 22
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	06 2e       	mov	r0, r22
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <GPIO_u8READPIN+0x4a>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <GPIO_u8READPIN+0x46>
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	82 23       	and	r24, r18
 4e8:	93 23       	and	r25, r19
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_u8READPIN+0x5a>
 4ec:	95 95       	asr	r25
 4ee:	87 95       	ror	r24
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_u8READPIN+0x56>
 4f4:	08 95       	ret
 4f6:	23 b3       	in	r18, 0x13	; 19
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	06 2e       	mov	r0, r22
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <GPIO_u8READPIN+0x6e>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <GPIO_u8READPIN+0x6a>
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	82 23       	and	r24, r18
 50c:	93 23       	and	r25, r19
 50e:	02 c0       	rjmp	.+4      	; 0x514 <GPIO_u8READPIN+0x7e>
 510:	95 95       	asr	r25
 512:	87 95       	ror	r24
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <GPIO_u8READPIN+0x7a>
 518:	08 95       	ret
 51a:	20 b3       	in	r18, 0x10	; 16
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	06 2e       	mov	r0, r22
 522:	02 c0       	rjmp	.+4      	; 0x528 <GPIO_u8READPIN+0x92>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <GPIO_u8READPIN+0x8e>
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	82 23       	and	r24, r18
 530:	93 23       	and	r25, r19
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_u8READPIN+0xa2>
 534:	95 95       	asr	r25
 536:	87 95       	ror	r24
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_u8READPIN+0x9e>
 53c:	08 95       	ret
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret

00000542 <GPIO_vInternal_pullupON>:
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
 548:	08 95       	ret

0000054a <GPIO_vLowNibble_Set_DDR>:
}

void GPIO_vLowNibble_Set_DDR(u_int8 portnum, u_int8 dir){
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	c8 2f       	mov	r28, r24
 550:	d6 2f       	mov	r29, r22
	GPIO_vSETPIN_DDR(portnum,0,dir);
 552:	46 2f       	mov	r20, r22
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,1,dir);
 55a:	4d 2f       	mov	r20, r29
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	8c 2f       	mov	r24, r28
 560:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,2,dir);
 564:	4d 2f       	mov	r20, r29
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	8c 2f       	mov	r24, r28
 56a:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,3,dir);
 56e:	4d 2f       	mov	r20, r29
 570:	63 e0       	ldi	r22, 0x03	; 3
 572:	8c 2f       	mov	r24, r28
 574:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <GPIO_vLowNibble_write>:

void GPIO_vLowNibble_write(u_int8 portnum, u_int8 val){
	val &= 0x0f;
 57e:	6f 70       	andi	r22, 0x0F	; 15
	switch(portnum){
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	fc 01       	movw	r30, r24
 584:	e1 54       	subi	r30, 0x41	; 65
 586:	f1 09       	sbc	r31, r1
 588:	e4 32       	cpi	r30, 0x24	; 36
 58a:	f1 05       	cpc	r31, r1
 58c:	f8 f4       	brcc	.+62     	; 0x5cc <GPIO_vLowNibble_write+0x4e>
 58e:	e2 52       	subi	r30, 0x22	; 34
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
		case 'A' :
		case 'a' :
			XPORTA &= 0xf0;
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	80 7f       	andi	r24, 0xF0	; 240
 59a:	8b bb       	out	0x1b, r24	; 27
			XPORTA |= val;
 59c:	8b b3       	in	r24, 0x1b	; 27
 59e:	68 2b       	or	r22, r24
 5a0:	6b bb       	out	0x1b, r22	; 27
		break;
 5a2:	08 95       	ret
		case 'B' :
		case 'b' :
			XPORTB &= 0xf0;
 5a4:	88 b3       	in	r24, 0x18	; 24
 5a6:	80 7f       	andi	r24, 0xF0	; 240
 5a8:	88 bb       	out	0x18, r24	; 24
			XPORTB |= val;
 5aa:	88 b3       	in	r24, 0x18	; 24
 5ac:	68 2b       	or	r22, r24
 5ae:	68 bb       	out	0x18, r22	; 24
		break;
 5b0:	08 95       	ret
		case 'C' :
		case 'c' :
			XPORTC &= 0xf0;
 5b2:	85 b3       	in	r24, 0x15	; 21
 5b4:	80 7f       	andi	r24, 0xF0	; 240
 5b6:	85 bb       	out	0x15, r24	; 21
			XPORTC |= val;
 5b8:	85 b3       	in	r24, 0x15	; 21
 5ba:	68 2b       	or	r22, r24
 5bc:	65 bb       	out	0x15, r22	; 21
		break;
 5be:	08 95       	ret
		case 'D' :
		case 'd' :
			XPORTD &= 0xf0;
 5c0:	82 b3       	in	r24, 0x12	; 18
 5c2:	80 7f       	andi	r24, 0xF0	; 240
 5c4:	82 bb       	out	0x12, r24	; 18
			XPORTD |= val;
 5c6:	82 b3       	in	r24, 0x12	; 18
 5c8:	68 2b       	or	r22, r24
 5ca:	62 bb       	out	0x12, r22	; 18
 5cc:	08 95       	ret

000005ce <GPIO_vHighNibble_Set_DDR>:
		break;
	}
}

void GPIO_vHighNibble_Set_DDR(u_int8 portnum, u_int8 dir){
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	c8 2f       	mov	r28, r24
 5d4:	d6 2f       	mov	r29, r22
	GPIO_vSETPIN_DDR(portnum,4,dir);
 5d6:	46 2f       	mov	r20, r22
 5d8:	64 e0       	ldi	r22, 0x04	; 4
 5da:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,5,dir);
 5de:	4d 2f       	mov	r20, r29
 5e0:	65 e0       	ldi	r22, 0x05	; 5
 5e2:	8c 2f       	mov	r24, r28
 5e4:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,6,dir);
 5e8:	4d 2f       	mov	r20, r29
 5ea:	66 e0       	ldi	r22, 0x06	; 6
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
	GPIO_vSETPIN_DDR(portnum,7,dir);
 5f2:	4d 2f       	mov	r20, r29
 5f4:	67 e0       	ldi	r22, 0x07	; 7
 5f6:	8c 2f       	mov	r24, r28
 5f8:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <GPIO_vHighNibble_write>:

void GPIO_vHighNibble_write(u_int8 portnum, u_int8 val){
	val &= 0xf0;
 602:	60 7f       	andi	r22, 0xF0	; 240
	switch(portnum){
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	e1 54       	subi	r30, 0x41	; 65
 60a:	f1 09       	sbc	r31, r1
 60c:	e4 32       	cpi	r30, 0x24	; 36
 60e:	f1 05       	cpc	r31, r1
 610:	f8 f4       	brcc	.+62     	; 0x650 <GPIO_vHighNibble_write+0x4e>
 612:	ee 5f       	subi	r30, 0xFE	; 254
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__tablejump2__>
		case 'A' :
		case 'a' :
			XPORTA &= 0x0f;
 61a:	8b b3       	in	r24, 0x1b	; 27
 61c:	8f 70       	andi	r24, 0x0F	; 15
 61e:	8b bb       	out	0x1b, r24	; 27
			XPORTA |= val;
 620:	8b b3       	in	r24, 0x1b	; 27
 622:	68 2b       	or	r22, r24
 624:	6b bb       	out	0x1b, r22	; 27
		break;
 626:	08 95       	ret
		case 'B' :
		case 'b' :
			XPORTB &= 0x0f;
 628:	88 b3       	in	r24, 0x18	; 24
 62a:	8f 70       	andi	r24, 0x0F	; 15
 62c:	88 bb       	out	0x18, r24	; 24
			XPORTB |= val;
 62e:	88 b3       	in	r24, 0x18	; 24
 630:	68 2b       	or	r22, r24
 632:	68 bb       	out	0x18, r22	; 24
		break;
 634:	08 95       	ret
		case 'C' :
		case 'c' :
			XPORTC &= 0x0f;
 636:	85 b3       	in	r24, 0x15	; 21
 638:	8f 70       	andi	r24, 0x0F	; 15
 63a:	85 bb       	out	0x15, r24	; 21
			XPORTC |= val;
 63c:	85 b3       	in	r24, 0x15	; 21
 63e:	68 2b       	or	r22, r24
 640:	65 bb       	out	0x15, r22	; 21
		break;
 642:	08 95       	ret
		case 'D' :
		case 'd' :
			XPORTD &= 0x0f;
 644:	82 b3       	in	r24, 0x12	; 18
 646:	8f 70       	andi	r24, 0x0F	; 15
 648:	82 bb       	out	0x12, r24	; 18
			XPORTD |= val;
 64a:	82 b3       	in	r24, 0x12	; 18
 64c:	68 2b       	or	r22, r24
 64e:	62 bb       	out	0x12, r22	; 18
 650:	08 95       	ret

00000652 <Keypad_vInit>:
 *  Author: ahmed
 */ 

#include "Keypad_ECU_driver.h"

void Keypad_vInit(u_int8 port){
 652:	cf 93       	push	r28
 654:	c8 2f       	mov	r28, r24
	GPIO_vSETPORT_DDR(port, 0x0F);
 656:	6f e0       	ldi	r22, 0x0F	; 15
 658:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_vSETPORT_DDR>
	GPIO_vInternal_pullupON(port, 4);
 65c:	64 e0       	ldi	r22, 0x04	; 4
 65e:	8c 2f       	mov	r24, r28
 660:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 5);
 664:	65 e0       	ldi	r22, 0x05	; 5
 666:	8c 2f       	mov	r24, r28
 668:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 6);
 66c:	66 e0       	ldi	r22, 0x06	; 6
 66e:	8c 2f       	mov	r24, r28
 670:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
	GPIO_vInternal_pullupON(port, 7);
 674:	67 e0       	ldi	r22, 0x07	; 7
 676:	8c 2f       	mov	r24, r28
 678:	0e 94 a1 02 	call	0x542	; 0x542 <GPIO_vInternal_pullupON>
}
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <Keypad_u8Check_Press>:

u_int8 Keypad_u8Check_Press(u_int8 port){
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	60 97       	sbiw	r28, 0x10	; 16
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	08 2f       	mov	r16, r24
	//u_int8 arr[4][4] = {{'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'},{'*','0','#','D'}}; //Real Keypad.
	u_int8 arr[4][4] = {{'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','-'},{'A','0','=','+'}}; //Proteus Keypad.
 69c:	80 e1       	ldi	r24, 0x10	; 16
 69e:	e0 e6       	ldi	r30, 0x60	; 96
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	de 01       	movw	r26, r28
 6a4:	11 96       	adiw	r26, 0x01	; 1
 6a6:	01 90       	ld	r0, Z+
 6a8:	0d 92       	st	X+, r0
 6aa:	8a 95       	dec	r24
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <Keypad_u8Check_Press+0x26>
	u_int8 row, column, x;
	u_int8 return_val = NOTPRESSED;
	for(row = 0; row < 4; row++){
 6ae:	f1 2c       	mov	r15, r1
		GPIO_vWRITEPIN(port, 0, 1);
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	80 2f       	mov	r24, r16
 6b6:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 1, 1);
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	80 2f       	mov	r24, r16
 6c0:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 2, 1);
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	80 2f       	mov	r24, r16
 6ca:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, 3, 1);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	63 e0       	ldi	r22, 0x03	; 3
 6d2:	80 2f       	mov	r24, r16
 6d4:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		GPIO_vWRITEPIN(port, row, 0);
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	6f 2d       	mov	r22, r15
 6dc:	80 2f       	mov	r24, r16
 6de:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		for(column = 0; column < 4; column++){
 6e2:	10 e0       	ldi	r17, 0x00	; 0
			x = GPIO_u8READPIN(port, (column + 4));
 6e4:	64 e0       	ldi	r22, 0x04	; 4
 6e6:	61 0f       	add	r22, r17
 6e8:	80 2f       	mov	r24, r16
 6ea:	0e 94 4b 02 	call	0x496	; 0x496 <GPIO_u8READPIN>
			if(0 == x){
 6ee:	81 11       	cpse	r24, r1
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <Keypad_u8Check_Press+0x8c>
				return_val = arr[row][column];
 6f2:	e1 e0       	ldi	r30, 0x01	; 1
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ec 0f       	add	r30, r28
 6f8:	fd 1f       	adc	r31, r29
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	f8 9e       	mul	r15, r24
 6fe:	e0 0d       	add	r30, r0
 700:	f1 1d       	adc	r31, r1
 702:	11 24       	eor	r1, r1
 704:	e1 0f       	add	r30, r17
 706:	f1 1d       	adc	r31, r1
 708:	80 81       	ld	r24, Z
 70a:	08 c0       	rjmp	.+16     	; 0x71c <Keypad_u8Check_Press+0x9c>
		GPIO_vWRITEPIN(port, 0, 1);
		GPIO_vWRITEPIN(port, 1, 1);
		GPIO_vWRITEPIN(port, 2, 1);
		GPIO_vWRITEPIN(port, 3, 1);
		GPIO_vWRITEPIN(port, row, 0);
		for(column = 0; column < 4; column++){
 70c:	1f 5f       	subi	r17, 0xFF	; 255
 70e:	14 30       	cpi	r17, 0x04	; 4
 710:	49 f7       	brne	.-46     	; 0x6e4 <Keypad_u8Check_Press+0x64>
u_int8 Keypad_u8Check_Press(u_int8 port){
	//u_int8 arr[4][4] = {{'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','C'},{'*','0','#','D'}}; //Real Keypad.
	u_int8 arr[4][4] = {{'7','8','9','/'}, {'4','5','6','*'}, {'1','2','3','-'},{'A','0','=','+'}}; //Proteus Keypad.
	u_int8 row, column, x;
	u_int8 return_val = NOTPRESSED;
	for(row = 0; row < 4; row++){
 712:	f3 94       	inc	r15
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	f8 12       	cpse	r15, r24
 718:	cb cf       	rjmp	.-106    	; 0x6b0 <Keypad_u8Check_Press+0x30>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
		if(0 == x){
			break;
		}
	}
	return return_val;
 71c:	60 96       	adiw	r28, 0x10	; 16
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	f8 94       	cli
 722:	de bf       	out	0x3e, r29	; 62
 724:	0f be       	out	0x3f, r0	; 63
 726:	cd bf       	out	0x3d, r28	; 61
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	ff 90       	pop	r15
 732:	08 95       	ret

00000734 <LCD_vSend_Falling_Edge>:
		}
	}
}

static void LCD_vSend_Falling_Edge(){
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 1);
 734:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 738:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	60 85       	ldd	r22, Z+8	; 0x08
 740:	87 81       	ldd	r24, Z+7	; 0x07
 742:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 746:	83 ef       	ldi	r24, 0xF3	; 243
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_vSend_Falling_Edge+0x16>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_vSend_Falling_Edge+0x1c>
 750:	00 00       	nop
	_delay_ms(2);
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 0);
 752:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 756:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	60 85       	ldd	r22, Z+8	; 0x08
 75e:	87 81       	ldd	r24, Z+7	; 0x07
 760:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
 764:	08 95       	ret

00000766 <LCD_vGet_Config>:
 *  Author: ahmed
 */ 
#include "LCD_ECU_driver.h"

OBJ *ip;
void LCD_vGet_Config(OBJ *ptr, u_int8 mode, u_int8 nibble, u_int8 port, u_int8 rs_port, u_int8 rs_pin, u_int8 rw_port, u_int8 rw_pin, u_int8 en_port, u_int8 en_pin){
 766:	8f 92       	push	r8
 768:	af 92       	push	r10
 76a:	cf 92       	push	r12
 76c:	ef 92       	push	r14
 76e:	0f 93       	push	r16
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
	ip = ptr;
 778:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 77c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	ip ->Mode = mode;
 780:	fc 01       	movw	r30, r24
 782:	60 83       	st	Z, r22
	ip ->Nibble = nibble;
 784:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 788:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 78c:	41 83       	std	Z+1, r20	; 0x01
	ip ->LCD_Port = port;
 78e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 792:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 796:	22 83       	std	Z+2, r18	; 0x02
	ip ->RS_Port = rs_port;
 798:	03 83       	std	Z+3, r16	; 0x03
	ip ->RS_Pin = rs_pin;
 79a:	e4 82       	std	Z+4, r14	; 0x04
	ip ->RW_Port = rw_port;
 79c:	c5 82       	std	Z+5, r12	; 0x05
	ip ->RW_Pin = rw_pin;
 79e:	a6 82       	std	Z+6, r10	; 0x06
	ip ->EN_Port = en_port;
 7a0:	87 82       	std	Z+7, r8	; 0x07
	ip ->EN_Pin = en_pin;
 7a2:	8a 85       	ldd	r24, Y+10	; 0x0a
 7a4:	80 87       	std	Z+8, r24	; 0x08
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	0f 91       	pop	r16
 7ac:	ef 90       	pop	r14
 7ae:	cf 90       	pop	r12
 7b0:	af 90       	pop	r10
 7b2:	8f 90       	pop	r8
 7b4:	08 95       	ret

000007b6 <LCD_vSend_Cmd>:
			}
		}
	}
}

void LCD_vSend_Cmd(u_int8 cmd){
 7b6:	cf 93       	push	r28
 7b8:	c8 2f       	mov	r28, r24
	if(ip ->Mode == EIGHT_BIT){
 7ba:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 7be:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 7c2:	80 81       	ld	r24, Z
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	81 f4       	brne	.+32     	; 0x7e8 <LCD_vSend_Cmd+0x32>
		GPIO_vWRITEPORT(ip ->LCD_Port, cmd);
 7c8:	6c 2f       	mov	r22, r28
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_vWRITEPORT>
		GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
 7d0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 7d4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 7d8:	40 e0       	ldi	r20, 0x00	; 0
 7da:	64 81       	ldd	r22, Z+4	; 0x04
 7dc:	83 81       	ldd	r24, Z+3	; 0x03
 7de:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		LCD_vSend_Falling_Edge();
 7e2:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 7e6:	58 c0       	rjmp	.+176    	; 0x898 <__stack+0x39>
	}
	else{
		if(ip -> Nibble == HIGH_NIBBLE){
 7e8:	81 81       	ldd	r24, Z+1	; 0x01
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	59 f5       	brne	.+86     	; 0x844 <LCD_vSend_Cmd+0x8e>
			GPIO_vHighNibble_write(ip -> LCD_Port, cmd>>4);
 7ee:	6c 2f       	mov	r22, r28
 7f0:	62 95       	swap	r22
 7f2:	6f 70       	andi	r22, 0x0F	; 15
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
 7fa:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 7fe:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	64 81       	ldd	r22, Z+4	; 0x04
 806:	83 81       	ldd	r24, Z+3	; 0x03
 808:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 80c:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
			GPIO_vHighNibble_write(ip -> LCD_Port, cmd);
 810:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 814:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 818:	6c 2f       	mov	r22, r28
 81a:	82 81       	ldd	r24, Z+2	; 0x02
 81c:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
 820:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 824:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	64 81       	ldd	r22, Z+4	; 0x04
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 832:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 836:	89 ef       	ldi	r24, 0xF9	; 249
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <LCD_vSend_Cmd+0x84>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <LCD_vSend_Cmd+0x8a>
 840:	00 00       	nop
 842:	2a c0       	rjmp	.+84     	; 0x898 <__stack+0x39>
			_delay_ms(1);
		}
		else{
			GPIO_vLowNibble_write(ip -> LCD_Port, cmd>>4);
 844:	6c 2f       	mov	r22, r28
 846:	62 95       	swap	r22
 848:	6f 70       	andi	r22, 0x0F	; 15
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
 850:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 854:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	64 81       	ldd	r22, Z+4	; 0x04
 85c:	83 81       	ldd	r24, Z+3	; 0x03
 85e:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 862:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
			GPIO_vLowNibble_write(ip -> LCD_Port, cmd);
 866:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 86a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 86e:	6c 2f       	mov	r22, r28
 870:	82 81       	ldd	r24, Z+2	; 0x02
 872:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 0);
 876:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 87a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 87e:	40 e0       	ldi	r20, 0x00	; 0
 880:	64 81       	ldd	r22, Z+4	; 0x04
 882:	83 81       	ldd	r24, Z+3	; 0x03
 884:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 888:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 88c:	89 ef       	ldi	r24, 0xF9	; 249
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
 896:	00 00       	nop
			_delay_ms(1);
		}
	}
}
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <LCD_vInit>:
	ip ->EN_Port = en_port;
	ip ->EN_Pin = en_pin;
}

void LCD_vInit(){
	if(ip != 0){
 89c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 8a0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 8a4:	89 2b       	or	r24, r25
 8a6:	09 f4       	brne	.+2      	; 0x8aa <LCD_vInit+0xe>
 8a8:	d2 c0       	rjmp	.+420    	; 0xa4e <LCD_vInit+0x1b2>
 8aa:	8f e4       	ldi	r24, 0x4F	; 79
 8ac:	93 ec       	ldi	r25, 0xC3	; 195
 8ae:	01 97       	sbiw	r24, 0x01	; 1
 8b0:	f1 f7       	brne	.-4      	; 0x8ae <LCD_vInit+0x12>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <LCD_vInit+0x18>
 8b4:	00 00       	nop
		_delay_ms(200);
		GPIO_vSETPIN_DDR(ip ->RS_Port, ip ->RS_Pin, 1);
 8b6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 8ba:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	64 81       	ldd	r22, Z+4	; 0x04
 8c2:	83 81       	ldd	r24, Z+3	; 0x03
 8c4:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip ->RW_Port, ip ->RW_Pin, 1);
 8c8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 8cc:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 8d0:	41 e0       	ldi	r20, 0x01	; 1
 8d2:	66 81       	ldd	r22, Z+6	; 0x06
 8d4:	85 81       	ldd	r24, Z+5	; 0x05
 8d6:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		GPIO_vSETPIN_DDR(ip ->EN_Port, ip ->EN_Pin, 1);
 8da:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 8de:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 8e2:	41 e0       	ldi	r20, 0x01	; 1
 8e4:	60 85       	ldd	r22, Z+8	; 0x08
 8e6:	87 81       	ldd	r24, Z+7	; 0x07
 8e8:	0e 94 45 01 	call	0x28a	; 0x28a <GPIO_vSETPIN_DDR>
		if(ip -> Mode == EIGHT_BIT){
 8ec:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 8f0:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 8f4:	80 81       	ld	r24, Z
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	c1 f5       	brne	.+112    	; 0x96a <LCD_vInit+0xce>
			GPIO_vSETPORT_DDR(ip ->LCD_Port, 0xFF);
 8fa:	6f ef       	ldi	r22, 0xFF	; 255
 8fc:	82 81       	ldd	r24, Z+2	; 0x02
 8fe:	0e 94 b5 01 	call	0x36a	; 0x36a <GPIO_vSETPORT_DDR>
			GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
 902:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 906:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 90a:	40 e0       	ldi	r20, 0x00	; 0
 90c:	66 81       	ldd	r22, Z+6	; 0x06
 90e:	85 81       	ldd	r24, Z+5	; 0x05
 910:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
 914:	85 ea       	ldi	r24, 0xA5	; 165
 916:	9e e0       	ldi	r25, 0x0E	; 14
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	f1 f7       	brne	.-4      	; 0x918 <LCD_vInit+0x7c>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_vInit+0x82>
 91e:	00 00       	nop
			_delay_ms(15);
			LCD_vSend_Cmd(LCD_8Bit_2Lines);
 920:	88 e3       	ldi	r24, 0x38	; 56
 922:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 926:	89 ef       	ldi	r24, 0xF9	; 249
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <LCD_vInit+0x8e>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <LCD_vInit+0x94>
 930:	00 00       	nop
			_delay_ms(1);
			LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
 932:	8e e0       	ldi	r24, 0x0E	; 14
 934:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 938:	89 ef       	ldi	r24, 0xF9	; 249
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	01 97       	sbiw	r24, 0x01	; 1
 93e:	f1 f7       	brne	.-4      	; 0x93c <LCD_vInit+0xa0>
 940:	00 c0       	rjmp	.+0      	; 0x942 <LCD_vInit+0xa6>
 942:	00 00       	nop
			_delay_ms(1);
			LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 94a:	83 ec       	ldi	r24, 0xC3	; 195
 94c:	99 e0       	ldi	r25, 0x09	; 9
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <LCD_vInit+0xb2>
 952:	00 c0       	rjmp	.+0      	; 0x954 <LCD_vInit+0xb8>
 954:	00 00       	nop
			_delay_ms(10);
			LCD_vSend_Cmd(LCD_ENTRY_MODE);
 956:	86 e0       	ldi	r24, 0x06	; 6
 958:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 95c:	89 ef       	ldi	r24, 0xF9	; 249
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <LCD_vInit+0xc4>
 964:	00 c0       	rjmp	.+0      	; 0x966 <LCD_vInit+0xca>
 966:	00 00       	nop
 968:	08 95       	ret
			_delay_ms(1);
		}
		else{
			if(ip ->Nibble == HIGH_NIBBLE){
 96a:	81 81       	ldd	r24, Z+1	; 0x01
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	c1 f5       	brne	.+112    	; 0x9e0 <LCD_vInit+0x144>
				GPIO_vHighNibble_Set_DDR(ip ->LCD_Port, 1);
 970:	61 e0       	ldi	r22, 0x01	; 1
 972:	82 81       	ldd	r24, Z+2	; 0x02
 974:	0e 94 e7 02 	call	0x5ce	; 0x5ce <GPIO_vHighNibble_Set_DDR>
				GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
 978:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 97c:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 980:	40 e0       	ldi	r20, 0x00	; 0
 982:	66 81       	ldd	r22, Z+6	; 0x06
 984:	85 81       	ldd	r24, Z+5	; 0x05
 986:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
 98a:	85 ea       	ldi	r24, 0xA5	; 165
 98c:	9e e0       	ldi	r25, 0x0E	; 14
 98e:	01 97       	sbiw	r24, 0x01	; 1
 990:	f1 f7       	brne	.-4      	; 0x98e <LCD_vInit+0xf2>
 992:	00 c0       	rjmp	.+0      	; 0x994 <LCD_vInit+0xf8>
 994:	00 00       	nop
				_delay_ms(15);
				LCD_vSend_Cmd(LCD_8Bit_2Lines);
 996:	88 e3       	ldi	r24, 0x38	; 56
 998:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 99c:	89 ef       	ldi	r24, 0xF9	; 249
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <LCD_vInit+0x104>
 9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <LCD_vInit+0x10a>
 9a6:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
 9a8:	8e e0       	ldi	r24, 0x0E	; 14
 9aa:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 9ae:	89 ef       	ldi	r24, 0xF9	; 249
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	01 97       	sbiw	r24, 0x01	; 1
 9b4:	f1 f7       	brne	.-4      	; 0x9b2 <LCD_vInit+0x116>
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LCD_vInit+0x11c>
 9b8:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 9c0:	83 ec       	ldi	r24, 0xC3	; 195
 9c2:	99 e0       	ldi	r25, 0x09	; 9
 9c4:	01 97       	sbiw	r24, 0x01	; 1
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <LCD_vInit+0x128>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <LCD_vInit+0x12e>
 9ca:	00 00       	nop
				_delay_ms(10);
				LCD_vSend_Cmd(LCD_ENTRY_MODE);
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 9d2:	89 ef       	ldi	r24, 0xF9	; 249
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	f1 f7       	brne	.-4      	; 0x9d6 <LCD_vInit+0x13a>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <LCD_vInit+0x140>
 9dc:	00 00       	nop
 9de:	08 95       	ret
				_delay_ms(1);
			}
			else{
				GPIO_vLowNibble_Set_DDR(ip ->LCD_Port, 1);
 9e0:	61 e0       	ldi	r22, 0x01	; 1
 9e2:	82 81       	ldd	r24, Z+2	; 0x02
 9e4:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_vLowNibble_Set_DDR>
				GPIO_vWRITEPIN(ip ->RW_Port, ip ->RW_Pin, 0);
 9e8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 9ec:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 9f0:	40 e0       	ldi	r20, 0x00	; 0
 9f2:	66 81       	ldd	r22, Z+6	; 0x06
 9f4:	85 81       	ldd	r24, Z+5	; 0x05
 9f6:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
 9fa:	85 ea       	ldi	r24, 0xA5	; 165
 9fc:	9e e0       	ldi	r25, 0x0E	; 14
 9fe:	01 97       	sbiw	r24, 0x01	; 1
 a00:	f1 f7       	brne	.-4      	; 0x9fe <LCD_vInit+0x162>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <LCD_vInit+0x168>
 a04:	00 00       	nop
				_delay_ms(15);
				LCD_vSend_Cmd(LCD_8Bit_2Lines);
 a06:	88 e3       	ldi	r24, 0x38	; 56
 a08:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 a0c:	89 ef       	ldi	r24, 0xF9	; 249
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	01 97       	sbiw	r24, 0x01	; 1
 a12:	f1 f7       	brne	.-4      	; 0xa10 <LCD_vInit+0x174>
 a14:	00 c0       	rjmp	.+0      	; 0xa16 <LCD_vInit+0x17a>
 a16:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_DISP_ON_CURSOR_ON);
 a18:	8e e0       	ldi	r24, 0x0E	; 14
 a1a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 a1e:	89 ef       	ldi	r24, 0xF9	; 249
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	01 97       	sbiw	r24, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_vInit+0x186>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCD_vInit+0x18c>
 a28:	00 00       	nop
				_delay_ms(1);
				LCD_vSend_Cmd(LCD_CLEAR_SCREEN);
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 a30:	83 ec       	ldi	r24, 0xC3	; 195
 a32:	99 e0       	ldi	r25, 0x09	; 9
 a34:	01 97       	sbiw	r24, 0x01	; 1
 a36:	f1 f7       	brne	.-4      	; 0xa34 <LCD_vInit+0x198>
 a38:	00 c0       	rjmp	.+0      	; 0xa3a <LCD_vInit+0x19e>
 a3a:	00 00       	nop
				_delay_ms(10);
				LCD_vSend_Cmd(LCD_ENTRY_MODE);
 a3c:	86 e0       	ldi	r24, 0x06	; 6
 a3e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_vSend_Cmd>
 a42:	89 ef       	ldi	r24, 0xF9	; 249
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	01 97       	sbiw	r24, 0x01	; 1
 a48:	f1 f7       	brne	.-4      	; 0xa46 <LCD_vInit+0x1aa>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <LCD_vInit+0x1b0>
 a4c:	00 00       	nop
 a4e:	08 95       	ret

00000a50 <LCD_vSend_Char>:
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 1);
	_delay_ms(2);
	GPIO_vWRITEPIN(ip ->EN_Port, ip -> EN_Pin, 0);
}

void LCD_vSend_Char(u_int8 data){
 a50:	cf 93       	push	r28
 a52:	c8 2f       	mov	r28, r24
	if(ip -> Mode == EIGHT_BIT){
 a54:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 a58:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 a5c:	80 81       	ld	r24, Z
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	b1 f4       	brne	.+44     	; 0xa8e <LCD_vSend_Char+0x3e>
		GPIO_vWRITEPORT(ip -> LCD_Port, data);
 a62:	6c 2f       	mov	r22, r28
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	0e 94 38 02 	call	0x470	; 0x470 <GPIO_vWRITEPORT>
		GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
 a6a:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 a6e:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 a72:	41 e0       	ldi	r20, 0x01	; 1
 a74:	64 81       	ldd	r22, Z+4	; 0x04
 a76:	83 81       	ldd	r24, Z+3	; 0x03
 a78:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
		LCD_vSend_Falling_Edge();
 a7c:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 a80:	89 ef       	ldi	r24, 0xF9	; 249
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	01 97       	sbiw	r24, 0x01	; 1
 a86:	f1 f7       	brne	.-4      	; 0xa84 <LCD_vSend_Char+0x34>
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <LCD_vSend_Char+0x3a>
 a8a:	00 00       	nop
 a8c:	58 c0       	rjmp	.+176    	; 0xb3e <LCD_vSend_Char+0xee>
		_delay_ms(1);
	}
	else{
		if(ip -> Nibble == HIGH_NIBBLE){
 a8e:	81 81       	ldd	r24, Z+1	; 0x01
 a90:	81 30       	cpi	r24, 0x01	; 1
 a92:	59 f5       	brne	.+86     	; 0xaea <LCD_vSend_Char+0x9a>
			GPIO_vHighNibble_write(ip -> LCD_Port, data>>4);
 a94:	6c 2f       	mov	r22, r28
 a96:	62 95       	swap	r22
 a98:	6f 70       	andi	r22, 0x0F	; 15
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
 aa0:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 aa4:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 aa8:	41 e0       	ldi	r20, 0x01	; 1
 aaa:	64 81       	ldd	r22, Z+4	; 0x04
 aac:	83 81       	ldd	r24, Z+3	; 0x03
 aae:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 ab2:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
			GPIO_vHighNibble_write(ip -> LCD_Port, data);
 ab6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 aba:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 abe:	6c 2f       	mov	r22, r28
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	0e 94 01 03 	call	0x602	; 0x602 <GPIO_vHighNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
 ac6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 aca:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 ace:	41 e0       	ldi	r20, 0x01	; 1
 ad0:	64 81       	ldd	r22, Z+4	; 0x04
 ad2:	83 81       	ldd	r24, Z+3	; 0x03
 ad4:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 ad8:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 adc:	89 ef       	ldi	r24, 0xF9	; 249
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	01 97       	sbiw	r24, 0x01	; 1
 ae2:	f1 f7       	brne	.-4      	; 0xae0 <LCD_vSend_Char+0x90>
 ae4:	00 c0       	rjmp	.+0      	; 0xae6 <LCD_vSend_Char+0x96>
 ae6:	00 00       	nop
 ae8:	2a c0       	rjmp	.+84     	; 0xb3e <LCD_vSend_Char+0xee>
			_delay_ms(1);
		}
		else{
			GPIO_vLowNibble_write(ip -> LCD_Port, data>>4);
 aea:	6c 2f       	mov	r22, r28
 aec:	62 95       	swap	r22
 aee:	6f 70       	andi	r22, 0x0F	; 15
 af0:	82 81       	ldd	r24, Z+2	; 0x02
 af2:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
 af6:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 afa:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 afe:	41 e0       	ldi	r20, 0x01	; 1
 b00:	64 81       	ldd	r22, Z+4	; 0x04
 b02:	83 81       	ldd	r24, Z+3	; 0x03
 b04:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 b08:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
			GPIO_vLowNibble_write(ip -> LCD_Port, data);
 b0c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 b10:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 b14:	6c 2f       	mov	r22, r28
 b16:	82 81       	ldd	r24, Z+2	; 0x02
 b18:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_vLowNibble_write>
			GPIO_vWRITEPIN(ip -> RS_Port, ip -> RS_Pin, 1);
 b1c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 b20:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 b24:	41 e0       	ldi	r20, 0x01	; 1
 b26:	64 81       	ldd	r22, Z+4	; 0x04
 b28:	83 81       	ldd	r24, Z+3	; 0x03
 b2a:	0e 94 c8 01 	call	0x390	; 0x390 <GPIO_vWRITEPIN>
			LCD_vSend_Falling_Edge();
 b2e:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_vSend_Falling_Edge>
 b32:	89 ef       	ldi	r24, 0xF9	; 249
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	01 97       	sbiw	r24, 0x01	; 1
 b38:	f1 f7       	brne	.-4      	; 0xb36 <LCD_vSend_Char+0xe6>
 b3a:	00 c0       	rjmp	.+0      	; 0xb3c <LCD_vSend_Char+0xec>
 b3c:	00 00       	nop
			_delay_ms(1);
		}
	}
}
 b3e:	cf 91       	pop	r28
 b40:	08 95       	ret

00000b42 <main>:
#include "Register.h"
#include "std_macros.h"
#define F_CPU 8000000UL

int main(void)
{
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	29 97       	sbiw	r28, 0x09	; 9
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	OBJ x;
	LCD_vGet_Config(&x, EIGHT_BIT, HIGH_NIBBLE, 'A', 'B', 0, 'B', 1, 'B', 2);
 b56:	82 e0       	ldi	r24, 0x02	; 2
 b58:	8f 93       	push	r24
 b5a:	0f 2e       	mov	r0, r31
 b5c:	f2 e4       	ldi	r31, 0x42	; 66
 b5e:	8f 2e       	mov	r8, r31
 b60:	f0 2d       	mov	r31, r0
 b62:	aa 24       	eor	r10, r10
 b64:	a3 94       	inc	r10
 b66:	0f 2e       	mov	r0, r31
 b68:	f2 e4       	ldi	r31, 0x42	; 66
 b6a:	cf 2e       	mov	r12, r31
 b6c:	f0 2d       	mov	r31, r0
 b6e:	e1 2c       	mov	r14, r1
 b70:	02 e4       	ldi	r16, 0x42	; 66
 b72:	21 e4       	ldi	r18, 0x41	; 65
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	61 e0       	ldi	r22, 0x01	; 1
 b78:	ce 01       	movw	r24, r28
 b7a:	01 96       	adiw	r24, 0x01	; 1
 b7c:	0e 94 b3 03 	call	0x766	; 0x766 <LCD_vGet_Config>
	LCD_vInit();
 b80:	0e 94 4e 04 	call	0x89c	; 0x89c <LCD_vInit>
	Keypad_vInit('C');
 b84:	83 e4       	ldi	r24, 0x43	; 67
 b86:	0e 94 29 03 	call	0x652	; 0x652 <Keypad_vInit>
 b8a:	0f 90       	pop	r0
	u_int8 y;
    while (1) {
		y = Keypad_u8Check_Press('C');
 b8c:	83 e4       	ldi	r24, 0x43	; 67
 b8e:	0e 94 40 03 	call	0x680	; 0x680 <Keypad_u8Check_Press>
		while(y != NOTPRESSED){
 b92:	8f 3f       	cpi	r24, 0xFF	; 255
 b94:	d9 f3       	breq	.-10     	; 0xb8c <main+0x4a>
 b96:	2f e9       	ldi	r18, 0x9F	; 159
 b98:	36 e8       	ldi	r19, 0x86	; 134
 b9a:	91 e0       	ldi	r25, 0x01	; 1
 b9c:	21 50       	subi	r18, 0x01	; 1
 b9e:	30 40       	sbci	r19, 0x00	; 0
 ba0:	90 40       	sbci	r25, 0x00	; 0
 ba2:	e1 f7       	brne	.-8      	; 0xb9c <main+0x5a>
 ba4:	00 c0       	rjmp	.+0      	; 0xba6 <main+0x64>
 ba6:	00 00       	nop
			_delay_ms(500);
			LCD_vSend_Char(y);
 ba8:	0e 94 28 05 	call	0xa50	; 0xa50 <LCD_vSend_Char>
 bac:	2f e7       	ldi	r18, 0x7F	; 127
 bae:	3a e1       	ldi	r19, 0x1A	; 26
 bb0:	86 e0       	ldi	r24, 0x06	; 6
 bb2:	21 50       	subi	r18, 0x01	; 1
 bb4:	30 40       	sbci	r19, 0x00	; 0
 bb6:	80 40       	sbci	r24, 0x00	; 0
 bb8:	e1 f7       	brne	.-8      	; 0xbb2 <main+0x70>
 bba:	00 c0       	rjmp	.+0      	; 0xbbc <main+0x7a>
 bbc:	00 00       	nop
 bbe:	e6 cf       	rjmp	.-52     	; 0xb8c <main+0x4a>

00000bc0 <__tablejump2__>:
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	05 90       	lpm	r0, Z+
 bc6:	f4 91       	lpm	r31, Z
 bc8:	e0 2d       	mov	r30, r0
 bca:	09 94       	ijmp

00000bcc <_exit>:
 bcc:	f8 94       	cli

00000bce <__stop_program>:
 bce:	ff cf       	rjmp	.-2      	; 0xbce <__stop_program>
